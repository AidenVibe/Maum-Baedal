// Prisma Schema for 마음배달 v2 (Dear Q)
// 6-Table 미니멀 설계 + NextAuth 지원

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 핵심 비즈니스 모델 (6-Table Design)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  // 마음배달 전용 필드
  kakaoSub      String?   @unique  // 카카오 고유 ID
  nickname      String?              // 사용자 표시명
  label         String?              // 가족 관계 라벨 (예: 엄마, 아들)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  pairsAsUser1  Pair[]    @relation("PairUser1")
  pairsAsUser2  Pair[]    @relation("PairUser2")
  answers       Answer[]

  @@map("users")
}

model Pair {
  id         String   @id @default(cuid())
  user1Id    String
  user2Id    String
  inviteCode String   @unique  // 초대코드 (온보딩용)
  status     String   @default("active")  // active, paused, inactive
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user1       User         @relation("PairUser1", fields: [user1Id], references: [id])
  user2       User         @relation("PairUser2", fields: [user2Id], references: [id])
  assignments Assignment[]

  @@unique([user1Id, user2Id])
  @@map("pairs")
}

model Question {
  id          String   @id @default(cuid())
  content     String   @db.Text
  category    String   @default("general")  // general, family, memory, etc.
  difficulty  String   @default("easy")     // easy, medium, hard
  isActive    Boolean  @default(true)
  
  // Analytics
  totalUsed   Int      @default(0)         // 사용 횟수
  totalSwaps  Int      @default(0)         // 교체 횟수  
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignments Assignment[]

  @@map("questions")
}

model Assignment {
  id          String   @id @default(cuid())
  pairId      String
  serviceDay  String   // "YYYY-MM-DD" 형식 (KST 05:00 기준)
  questionId  String
  swapCount   Int      @default(0)         // 질문 교체 횟수 (최대 1회)
  status      String   @default("active")  // active, completed, expired
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pair         Pair          @relation(fields: [pairId], references: [id])
  question     Question      @relation(fields: [questionId], references: [id])
  answers      Answer[]
  conversation Conversation?

  @@unique([pairId, serviceDay])  // 중요: 하루에 쌍당 1개만
  @@map("assignments")
}

model Answer {
  id           String   @id @default(cuid())
  assignmentId String
  userId       String
  content      String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([assignmentId, userId])  // 중요: Assignment당 사용자 1명은 1개 답변만
  @@map("answers")
}

model Conversation {
  id           String   @id @default(cuid())
  assignmentId String   @unique
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())  // 게이트 공개 시점

  // Relations
  assignment Assignment @relation(fields: [assignmentId], references: [id])

  @@map("conversations")
}

// 운영 및 분석용 모델 (추후 확장)
model DailyStat {
  id             String   @id @default(cuid())
  date           String   // "YYYY-MM-DD" 
  totalPairs     Int      @default(0)
  activeAssignments Int   @default(0)
  completedGates Int      @default(0)  // 게이트 공개 완료 수
  totalAnswers   Int      @default(0)
  totalSwaps     Int      @default(0)  // 질문 교체 총 횟수
  createdAt      DateTime @default(now())

  @@unique([date])
  @@map("daily_stats")
}